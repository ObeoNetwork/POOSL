import "packet.poosl"

data class testpacket extends packet
variables
methods

data class localpacket extends packet
variables
methods
    /* adds 1 */
	add(I : Integer) : Integer
		return I + 1

process class Producer(
/* Time delay in between produced messages */
IdleTime : Integer)
ports
/* This is the only port; it is used for outgoing messages. */
	Out
messages
/* Outgoing message */
	Out!Message(packet)
variables
/* Serial number of the produced messages. */
	ID : Integer
init
	Initialise()()
methods
/* Initializes the process class. */
	Initialise()()
		ID := 1 ;
		SendPacket()()
		/* Send a message */
	SendPacket()() | p : packet |
		ID := new(localpacket) add(ID) ;
		p := new(testpacket) setIdentity(ID) ;
		p := new(packet) setIdentity(ID) ;
		Out!Message(p) { ID := ID + 1 } ;
		Idle()()
		/* Wait a while before sending the next me
	ssage */
	Idle()()
		delay(IdleTime) ;
		SendPacket()()

		// -----------------------------------------------------------------------------

		/* Process class that transfers messages. */
process class Bus
ports
/* Port that is used for incoming messages. */
	In,
/* Port that is used for outgoing messages. */
	Out
messages
/* Incoming message */
	In?Message(packet),
/* Outgoing message */
	Out!Message(packet)
variables
	p : packet
init
	Transfer()()
methods
/* Transfer messages */
	Transfer()()
		In?Message(p) ;
		Out!Message(p) ;
		Transfer()()

		// -----------------------------------------------------------------------------

		/* Process class that consumes messages. */
		process class Consumer
		ports
		/* This is the only port; it is used for incoming messages. */
			In
		messages
		/* Incoming message */
			In?Message(packet)
		variables
			ID : Integer
			IDz : String
		init
			ReceivePacket()()
		methods
		/* Receive messages */
			ReceivePacket()() | p : packet |
				IDz := " élèveë" ;
				In?Message(p) { ID := p getIdentity } ;
				ReceivePacket()()

				// -----------------------------------------------------------------------------

				/* Cluster class that models an application consisting of a Producer and a Consumer. */
				cluster class ProducerConsumer(
				/* Time delay in between produced messages */
				IdleTime : Integer)
				ports
				/* Port that is used for incoming messages. */
					In,
				/* Port that is used for outgoing messages. */
					Out
				instances
				/* Producer of messages */
					Producer : Producer(IdleTime := IdleTime)
					/* Consumer of messages */
					Consumer : Consumer()
				channels
					{ In, Consumer.In }
					{ Out, Producer.Out }

					// -----------------------------------------------------------------------------

					/* Top-level system specification */
				system
				instances
				/* Application that produces and consumes messages */
					ProducerConsumer : ProducerConsumer(IdleTime := 2)

					/* Bus that transfers messages */
					Bus : Bus()
				channels
					{ Bus.In, ProducerConsumer.Out }
					{ Bus.Out, ProducerConsumer.In }