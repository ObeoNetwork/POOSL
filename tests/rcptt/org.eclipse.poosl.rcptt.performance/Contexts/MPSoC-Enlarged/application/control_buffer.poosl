importlib "performance.poosl"
importlib "structures.poosl"

data class ControlBufferMonitor extends Object
variables
	ReservedLocations : Integer,
	PreviousTime : Real,
	AverageOccupation : LongRunTimeAverage,
	BufferSize : Integer,
	Name : String,
	TraceFile : FileOut,
	Buffer : Queue,
	AvailableTokens : Integer,
	Monitor : Boolean,
	MaximumOccupation : Integer,
	Trace : Boolean,
	TokenSize : Integer,
	VarianceOccupation : LongRunTimeVariance
methods
	remove(CurrentTime : Real) : Integer | Occupation : Integer |
		Occupation := ReservedLocations + AvailableTokens;
		if Trace & (CurrentTime > PreviousTime) then
			TraceFile writeString("At time: " + PreviousTime printString + " Occupation: " + (Occupation * TokenSize)
				printString cr)
		fi;
		AvailableTokens := AvailableTokens - 1;
		Occupation := Occupation - 1;
		if Monitor then
			AverageOccupation rewardBM((Occupation * TokenSize) asReal, CurrentTime);
			VarianceOccupation rewardBM((Occupation * TokenSize) asReal, CurrentTime)
		fi;
		PreviousTime := CurrentTime;
		return Buffer remove

	room(NumberOfTokens : Integer) : Boolean
		if BufferSize > 0 then
			return (ReservedLocations + AvailableTokens + NumberOfTokens) <= BufferSize
		else
			return true
		fi

	@Init
	init(N : String, BS : Integer, NIT, CIT : Queue, TS : Integer, M : Boolean, T : Boolean) : ControlBufferMonitor
		Name := N;
		BufferSize := BS;
		TokenSize := TS;
		AvailableTokens := 0;
		ReservedLocations := 0;
		PreviousTime := 0.0;
		Monitor := M;
		if Monitor then
			MaximumOccupation := 0;
			AverageOccupation := new(LongRunTimeAverage) withParameters(0.95, 0.95);
			VarianceOccupation := new(LongRunTimeVariance) withParameters(0.95, 0.95)
		fi;
		Trace := T;
		if Trace then
			TraceFile := new(FileOut) destination("Channel_" + Name + ".trace") open;
			TraceFile write("Traced Buffer Occupancy for Channel: " + Name cr cr)
		fi;
		Buffer := new(Queue);
		while NIT isEmpty not do
			self reserve(NIT inspect, 0.0);
			self write(NIT inspect, CIT inspect);
			NIT remove;
			CIT remove
		od;
		return self

	reserve(NumberOfTokens : Integer, CurrentTime : Real) : ControlBufferMonitor | Occupation : Integer |
		Occupation := ReservedLocations + AvailableTokens;
		if Trace & (CurrentTime > PreviousTime) then
			TraceFile write("At time: " + PreviousTime printString + " Occupation: " + (Occupation * TokenSize)
				printString cr)
		fi;
		ReservedLocations := ReservedLocations + NumberOfTokens;
		Occupation := Occupation + NumberOfTokens;
		if Monitor then
			if (Occupation * TokenSize) > MaximumOccupation then
				MaximumOccupation := Occupation * TokenSize
			fi;
			AverageOccupation rewardBM((Occupation * TokenSize) asReal, CurrentTime);
			VarianceOccupation rewardBM((Occupation * TokenSize) asReal, CurrentTime)
		fi;
		PreviousTime := CurrentTime;
		return self

	write(NumberOfTokens : Integer, Scenario : String) : ControlBufferMonitor | Counter : Integer |
		ReservedLocations := ReservedLocations - NumberOfTokens;
		AvailableTokens := AvailableTokens + NumberOfTokens;
		Counter := NumberOfTokens;
		while (Counter > 0) do
			Buffer add(Scenario);
			Counter := Counter - 1
		od;
		return self

	available : Boolean
		return AvailableTokens >= 1

	getResults : String | Result : String |
		Result := "-------------------------------" cr + "Statistics for Channel: " + Name cr cr;
		Result concat("Observed Maximum Buffer Occupancy: " + MaximumOccupation printString cr cr);
		Result concat("Average Buffer Occupancy:" cr + AverageOccupation logStatistics cr cr);
		Result concat("Variance in Buffer Occupancy:" cr + VarianceOccupation logStatistics cr cr);
		return Result

	inspect : String
		return Buffer inspect

	accurate : Boolean
		return AverageOccupation accurate

process class ControlBuffer(Name : String, TokenSize : Integer)
ports
	Out,
	Communication,
	In
messages
	Communication!ReleaseRoom(String, Integer, Integer),
	Communication!ReserveRoom(String, String, Integer, Integer),
	Communication!Transfer(String, String, Integer),
	Communication!Use(String),
	Communication?TransferCompleted(String, Integer),
	Communication?TransferInitiated(String),
	In!ReservationSuccessful(),
	In?MappedTo(String),
	In?ReserveRoom(Integer),
	In?WriteTokens(String),
	Out!TokenAvailable(String),
	Out?InspectTokenAvailability(),
	Out?MappedTo(String),
	Out?ReleaseRoom()
variables
	TransferID : Integer,
	MapTo : String,
	Status : ControlBufferMonitor
init
	Initialise()()
methods
	HandleInput()() | NumberOfTokens, ID : Integer, Scenario, Connection : String |
		In?ReserveRoom(NumberOfTokens | Status room(NumberOfTokens));
		Communication!ReserveRoom(Name, MapTo, NumberOfTokens, TokenSize);
		Communication?TransferInitiated(Connection | Connection = Name) {Status reserve(NumberOfTokens, currentTime)};
		In!ReservationSuccessful;
		In?WriteTokens(Scenario) {TransferID := TransferID + 1};
		par
			Communication!Transfer(Name, MapTo, TransferID);
			Communication?TransferCompleted(Connection, ID |(Connection = Name) & (ID = TransferID)) {Status
				write(NumberOfTokens, Scenario)}
		and
			HandleInput()()
		rap

	HandleOutput()()
		[ Status available ] Out?InspectTokenAvailability;
		Out!TokenAvailable(Status inspect);
		Out?ReleaseRoom;
		Communication!ReleaseRoom(MapTo, 1, 1) {Status remove(currentTime)};
		HandleOutput()()

	Initialise()()
		TransferID := 0;
		Status := new(ControlBufferMonitor) init(Name, -1, new(Queue), new(Queue), TokenSize, false, false);
		DetermineMapping()();
		NotifyPlatformAboutMapping()();
		par
			HandleInput()()
		and
			HandleOutput()()
		rap

	DetermineMapping()() | InputTask, OutputTask : String |
		In?MappedTo(InputTask);
		Out?MappedTo(OutputTask);
		if InputTask = OutputTask then
			MapTo := InputTask
		else
			MapTo := "NoC"
		fi

	NotifyPlatformAboutMapping()()
		Communication!Use(MapTo)