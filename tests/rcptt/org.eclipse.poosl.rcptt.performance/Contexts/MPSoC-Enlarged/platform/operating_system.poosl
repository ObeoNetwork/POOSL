import "scheduled_task.poosl"
importlib "structures.poosl"

data class SchedulerStatus extends Object
variables
	TaskList : Sequence,
	Policy : String
methods
	@Init
	init(T : String) : SchedulerStatus
		Policy := T;
		TaskList := new(Sequence);
		return self

	registerTask(Task, Scenario : String, Priority : Integer) : ScheduledTask | NewTask : ScheduledTask,
			It : SequenceIterator, Found : Boolean |
		NewTask := new(ScheduledTask) init(Task, Scenario, Priority);
		if Policy = "FCFS" then
			TaskList prepend(NewTask)
		else if Policy = "PB" then
			Found := false;
			It := TaskList iterator;
			while It isDone not & !Found do
				if It element getPriority < Priority then
					It advance
				else
					It addBefore(NewTask);
					Found := true
				fi
			od;
			if !Found then
				TaskList append(NewTask)
			fi
		else
			self error("Unknown Scheduling Policy")
		fi fi;
		return NewTask

	nextTaskToSchedule : ScheduledTask
		return TaskList last

	printString : String | PrintOut : String, It : SequenceIterator |
		PrintOut := "Operating System with Policy: " + Policy printString cr cr + "List of Waiting Tasks:" cr;
		PrintOut := PrintOut + "( ";
		It := TaskList iterator;
		while It isDone not do
			PrintOut := PrintOut + It element printString;
			if It element != TaskList last then
				PrintOut := PrintOut + ", "
			fi;
			It advance
		od;
		PrintOut := PrintOut + " )";
		return PrintOut

	removeTask(OldTask : ScheduledTask) : Integer | i : Integer |
		i := TaskList find(1, OldTask);
		TaskList removeAt(i);
		return TaskList size

	updateTask(Task : ScheduledTask) : SchedulerStatus | It : SequenceIterator, i : Integer |
		It := TaskList iterator;
		i := 1;
		while It isDone not do
			if It element getName = Task getName then
				TaskList putAt(i, Task)
			fi;
			It advance;
			i := i + 1
		od;
		return self

process class OperatingSystem(NodeName : String, Policy : String)
ports
	Processor,
	Task
messages
	Processor!Execute(ScheduledTask),
	Processor!Preempt(),
	Processor!Use(Boolean),
	Processor?Stopped(ScheduledTask),
	Task!ExecutionCompleted(String),
	Task?Execute(String, String, Integer, String),
	Task?Use(String)
variables
	Status : SchedulerStatus
init
	Initialise()()
methods
	Schedule()() | Task, Scenario, MapToNode : String, Priority, NumberOfWaitingTasks : Integer, NewTask,
			OldTask : ScheduledTask |
		sel
			Task?Execute(Task, Scenario, Priority, MapToNode | MapToNode = NodeName) {NewTask := Status
				registerTask(Task, Scenario, Priority)};
			if Status nextTaskToSchedule == NewTask then
				sel
					Processor!Execute(NewTask)
				/* No other Task is being executed */
				or
					Processor!Preempt;
					/* Preempt running Task */
					Processor?Stopped(OldTask) {Status updateTask(OldTask)};
					Processor!Execute(NewTask)
				les
			fi
		or
			Processor?Stopped(OldTask) {NumberOfWaitingTasks := Status removeTask(OldTask)};
			Task!ExecutionCompleted(OldTask getName);
			if NumberOfWaitingTasks > 0 then
				/* Run the next available Task */
				Processor!Execute(Status nextTaskToSchedule)
			fi
		les;
		Schedule()()

	Initialise()() | MapTo : String, InUse : Boolean |
		InUse := false;
		abort
			while true do
				Task?Use(MapTo | MapTo = NodeName) {InUse := true}
			od
		with delay (1.0e-12);
		Processor!Use(InUse);
		if InUse then
			Status := new(SchedulerStatus) init(Policy);
			Schedule()()
		fi