importlib "performance.poosl"
import "scheduled_task.poosl"
importlib "structures.poosl"
importlib "json.poosl"

data class ProcessorStatus extends Object
variables
	PowerConsumption : Real,
	RunningTask : String,
	MemoryUsages : Map,
	ExecutionTimes : Map,
	ContextSwitchingTime : Real,
	Running : Boolean,
	Utilisation : LongRunTimeAverage,
	Frequency : Real
methods
	run(T : ScheduledTask, CurrentTime : Real) : ProcessorStatus
		Running := true;
		RunningTask := T getName;
		Utilisation rewardBM(1.0, CurrentTime);
		return self

	@Init
	init(Type : String) : ProcessorStatus | File : FileIn, i : Integer, Task : String, CalibrationData : Map |
		if (Type != "MIPS") & (Type != "ARM") & (Type != "TriMedia") then
			self error("Unknown Processor Type")
		fi;
		File := new(FileIn) source(Type + ".txt") open;
		Task := "";
		while File atEndOfFile not do
			Task concat(File readLine)
		od;
		CalibrationData := new(JSON) parse(Task);
		Frequency := CalibrationData at("Frequency") asReal;
		ContextSwitchingTime := CalibrationData at("ContextSwitchingTime") asReal;
		PowerConsumption := CalibrationData at("PowerConsumption");
		ExecutionTimes := new(Map);
		MemoryUsages := new(Map);
		i := 1;
		while i <= 35 do
			Task := "Task" + i printString;
			ExecutionTimes putAt(Task, new(Map));
			MemoryUsages putAt(Task, new(Map));
			ExecutionTimes at(Task) putAt("S1", CalibrationData at(Task) at("Cycles") at("S1") asReal);
			ExecutionTimes at(Task) putAt("S2", CalibrationData at(Task) at("Cycles") at("S2") asReal);
			ExecutionTimes at(Task) putAt("S3", CalibrationData at(Task) at("Cycles") at("S3") asReal);
			ExecutionTimes at(Task) putAt("S4", CalibrationData at(Task) at("Cycles") at("S4") asReal);
			ExecutionTimes at(Task) putAt("S5", CalibrationData at(Task) at("Cycles") at("S5") asReal);
			ExecutionTimes at(Task) putAt("S6", CalibrationData at(Task) at("Cycles") at("S6") asReal);
			ExecutionTimes at(Task) putAt("S7", CalibrationData at(Task) at("Cycles") at("S7") asReal);
			ExecutionTimes at(Task) putAt("S8", CalibrationData at(Task) at("Cycles") at("S8") asReal);
			ExecutionTimes at(Task) putAt("S9", CalibrationData at(Task) at("Cycles") at("S9") asReal);
			ExecutionTimes at(Task) putAt("S10", CalibrationData at(Task) at("Cycles") at("S10") asReal);
			MemoryUsages at(Task) putAt("S1", CalibrationData at(Task) at("Memory") at("S1"));
			MemoryUsages at(Task) putAt("S2", CalibrationData at(Task) at("Memory") at("S2"));
			MemoryUsages at(Task) putAt("S3", CalibrationData at(Task) at("Memory") at("S3"));
			MemoryUsages at(Task) putAt("S4", CalibrationData at(Task) at("Memory") at("S4"));
			MemoryUsages at(Task) putAt("S5", CalibrationData at(Task) at("Memory") at("S5"));
			MemoryUsages at(Task) putAt("S6", CalibrationData at(Task) at("Memory") at("S6"));
			MemoryUsages at(Task) putAt("S7", CalibrationData at(Task) at("Memory") at("S7"));
			MemoryUsages at(Task) putAt("S8", CalibrationData at(Task) at("Memory") at("S8"));
			MemoryUsages at(Task) putAt("S9", CalibrationData at(Task) at("Memory") at("S9"));
			MemoryUsages at(Task) putAt("S10", CalibrationData at(Task) at("Memory") at("S10"));
			i := i + 1
		od;
		File close;
		Running := false;
		Utilisation := new(LongRunTimeAverage) withParameters(0.95, 0.95);
		return self

	idle(CurrentTime : Real) : ProcessorStatus
		Running := false;
		RunningTask := nil;
		Utilisation rewardBM(0.0, CurrentTime);
		return self

	getContextSwitchingTime : Real
		return ContextSwitchingTime / Frequency

	getPowerConsumption : Real
		return PowerConsumption

	log(Name, MemoryResults : String) : ProcessorStatus | LogFile : FileOut |
		LogFile := new(FileOut) destination("Processor" + Name + ".log") open;
		LogFile write("Processor Utilisation Results:" cr cr + "Average Utilisation:" cr + Utilisation logStatistics cr
			cr + "Data Memory Results: " cr cr + MemoryResults);
		LogFile close;
		return self

	getMemoryUsage(Task : ScheduledTask) : Integer
		return MemoryUsages at(Task getName) at(Task getScenario)

	getExecutionTime(Task : ScheduledTask) : Real
		if Task getRemainingExecutionTime = nil then
			return ExecutionTimes at(Task getName) at(Task getScenario) / Frequency
		else
			return Task getRemainingExecutionTime
		fi

	printString : String
		if Running then
			return "Processor is Executing Task " + RunningTask printString cr cr + "Average Utilisation:" cr +
				Utilisation printStatistics
		else
			return "Processor is Idle" cr cr + "Average Utilisation:" cr + Utilisation printStatistics
		fi

	notPreviouslyPreempted(Task : ScheduledTask) : Boolean
		if Task getRemainingExecutionTime != nil then
			return false
		else
			return true
		fi

	update(Task : ScheduledTask, RunTime : Real) : ProcessorStatus
		if Task getRemainingExecutionTime = nil then
			Task setRemainingExecutionTime((ExecutionTimes at(Task getName) at(Task getScenario) / Frequency) - RunTime)
		else
			Task setRemainingExecutionTime(Task getRemainingExecutionTime - RunTime)
		fi;
		return self

	accurate : Boolean
		return Utilisation accurate

process class ProcessingUnit(NodeName : String, Type : String, VoltageScaleFactor : Real)
ports
	Monitor,
	OS,
	Power,
	Memory
messages
	Memory!Allocate(Integer),
	Memory!Free(Integer),
	Memory!Status(),
	Memory!Use(Boolean),
	Memory?AccuracyStatus(Boolean),
	Memory?SimulationResults(String),
	Monitor!AccuracyStatus(Boolean),
	Monitor!InitialiseMonitor(String),
	Monitor?Status(String),
	Monitor?StopSimulation(),
	OS!Stopped(ScheduledTask),
	OS?Execute(ScheduledTask),
	OS?Preempt(),
	OS?Use(Boolean),
	Power!StartConsumption(Real),
	Power!StopConsumption(Real)
variables
	Status : ProcessorStatus
init
	Initialise()()
methods
	ExecuteTask()() | Task : ScheduledTask, StartTime : Real, Preempt : Boolean |
		OS?Execute(Task) {Status run(Task, currentTime)};
		Power!StartConsumption(Status getPowerConsumption * (VoltageScaleFactor sqr));
		delay Status getContextSwitchingTime / VoltageScaleFactor;
		if Status notPreviouslyPreempted(Task) then
			Memory!Allocate(Status getMemoryUsage(Task))
		fi;
		StartTime := currentTime;
		Preempt := false;
		abort
			delay Status getExecutionTime(Task) / VoltageScaleFactor
		with OS?Preempt {
			Preempt := true;
			Status update(Task, (currentTime - StartTime) * VoltageScaleFactor)
		};
		OS!Stopped(Task) {Status idle(currentTime)};
		Power!StopConsumption(Status getPowerConsumption * (VoltageScaleFactor sqr));
		if Preempt not then
			Memory!Free(Status getMemoryUsage(Task))
		fi;
		ExecuteTask()()

	Initialise()() | InUse : Boolean, Results : String |
		OS?Use(InUse);
		if InUse then
			Memory!Use(InUse);
			Monitor!InitialiseMonitor("Processor" + NodeName);
			Status := new(ProcessorStatus) init(Type);
			if  (VoltageScaleFactor != 1.0 / 4.0) & (VoltageScaleFactor != 1.0 / 2.0) & (VoltageScaleFactor != 1.0 /
					3.0) & (VoltageScaleFactor != 2.0 / 3.0) & (VoltageScaleFactor != 3.0 / 4.0) & (VoltageScaleFactor
					!= 1.0 / 1.0) then
				Status error("Invalid voltage scale factor")
			fi;
			abort
				par
					ExecuteTask()()
				and
					CheckAccuracyStatus()()
				rap
			with Monitor?StopSimulation;
			Memory?SimulationResults(Results) {Status log(NodeName, Results)}
		fi

	CheckAccuracyStatus()() | ID : String, Accurate : Boolean |
		Monitor?Status(ID | ID = ("Processor" + NodeName));
		Memory!Status;
		Memory?AccuracyStatus(Accurate);
		Monitor!AccuracyStatus(Accurate & Status accurate);
		CheckAccuracyStatus()()