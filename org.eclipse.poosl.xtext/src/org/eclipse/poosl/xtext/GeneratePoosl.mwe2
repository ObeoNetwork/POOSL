module org.eclipse.poosl.xtext.GeneratePoosl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "org.eclipse.poosl.xtext"
var fileExtensions = "poosl"
var rootPath = ".."

Workflow {
	component = XtextGenerator {

		standaloneSetup = {
			scanClasspath = true
		}

		configuration = PooslGeneratorModule {
			project = StandardProjectConfig {

				baseName = "org.eclipse.poosl.xtext"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				preferXtendStubs = false
				encoding = "windows-1252"
				lineDelimiter = "\r\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = XtextGeneratorLanguage {
			name = "org.eclipse.poosl.xtext.Poosl"
			fileExtensions = fileExtensions
			referencedResource = "platform:/resource/org.eclipse.poosl.model/model/poosl.genmodel"

			grammarUri = "platform:/resource/${projectName}/src/org/eclipse/poosl/xtext/Poosl.xtext"// Java API to access grammar elements (required by several other fragments)

			fragment = grammarAccess.GrammarAccessFragment2 auto-inject {}

			// generates Java API for the generated EPackages
			//fragment = ecore.EcoreGeneratorFragment auto-inject {}

			// the Ecore2Xtext specific terminal converter			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment2 auto-inject {
				generateStub = false
			}

			// the old serialization component
			// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}    

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment2 auto-inject {}

			// the Antlr parser
			fragment = parser.antlr.XtextAntlrGeneratorFragment2 auto-inject {
				options = {
					classSplitting = true
				}
			}

			fragment = validation.ValidatorFragment2 auto-inject {
			//composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			//composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// old scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 {}
			fragment = exporting.SimpleNamesFragment2 {}

			// scoping and exporting API
			//fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
			//fragment = exporting.QualifiedNamesFragment auto-inject {}
			fragment = builder.BuilderIntegrationFragment2 auto-inject {}

			// generator API
			//fragment = generator.GeneratorFragment auto-inject {}

			// formatter API
			//fragment = formatting.FormatterFragment {}
			//fragment = ecore2xtext.FormatterFragment {}
			fragment = formatting.Formatter2Fragment2 {}

			// labeling API
			fragment = ui.labeling.LabelProviderFragment2 {}

			// outline API
			fragment = ui.outline.OutlineTreeProviderFragment2 {}
			fragment = ui.outline.QuickOutlineFragment2 {}

			// quickfix API
			fragment = ui.quickfix.QuickfixProviderFragment2 {}

			// content assist API
			//			fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}			
			fragment = ui.contentAssist.ContentAssistFragment2 auto-inject {}

//			fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {
//				options = {
//					classSplitting = true
//				}
//			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.JUnitFragment {}

			// project wizard (optional)
			// fragment = projectWizard.SimpleProjectWizardFragment auto-inject {
			//	generatorProjectName = "${projectName}"
			// }

			// rename refactoring
			fragment = ui.refactoring.RefactorElementNameFragment2 auto-inject {}

			// provides the necessary bindings for java types integration
			//fragment = types.TypesGeneratorFragment auto-inject {}

			// provides a preference page for template proposals
			//fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

			// provides a compare view
			fragment = ui.compare.CompareFragment2 auto-inject {}
		}
	}
}
