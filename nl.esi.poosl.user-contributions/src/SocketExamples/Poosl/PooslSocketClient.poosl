/* This example demonstrates how processes can communicate via external socket connections.
 * It models a Client and a Server that communicate messages via an external socket connection.
 * 
 */
importlib "SocketProcess.poosl"

// -----------------------------------------------------------------------------
//
/* Example client process */
process class Client()
ports
	/* This is the only port; it is used for sending and receiving messages over the socket. */
	Port
messages
	/* Received message over the socket. */
	Port?Received(String),
	/* Message to be send over the socket. */
	Port!Send(String)
variables
	console : Console,
init
	Init()()
methods
	/* Initializes the process class. */
	Init()()
		console := new(Console);
		Iterate()()

	/* Perform one iteration of the communication protocol. */
	Iterate()() | valueAsInteger : Integer, valueAsString : String |
		valueAsInteger := 4;
		while (0 < valueAsInteger) do
			Port!Send(valueAsInteger printString);
			console writeLine("Send: " + valueAsInteger printString);
			Port?Received(valueAsString);
			console writeLine("Read: " + valueAsString);
			valueAsInteger := valueAsString parseAsInteger()
		od

// -----------------------------------------------------------------------------
//
/* Top-level system specification */
system
instances
	/* Client side of the protocol. */
	Client : Client()
	/* Socket connection for the Client process. */
	ClientSocket : SocketProcess(HostName := "localhost", PortNumber := 9090)
channels
	{ Client.Port, ClientSocket.Port }