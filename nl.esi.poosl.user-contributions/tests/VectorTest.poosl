import "../Vector.poosl"
import "../UnitTester.poosl"

system
instances
	tester : VectorTester()
channels

process class VectorTester()
ports

messages

variables
	 a, b, c, d, e, f, result : Vector
	 r : Real
	 tester : UnitTester

init
	test()()
methods

	test()() | errorMsg : String |

		tester := new(UnitTester) init();
		new(Console) writeLine("Starting unit test of Vector");

		// Test of assignment
		errorMsg := "Test of real valued assignment failed";
	    a := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 1.0); // Real valued vector
		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0); // Real valued vector

		tester assertTrue((a at(1) = 1.0) & (a at(2) = 1.0), errorMsg);
		tester assertTrue((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);

		errorMsg := "Test of integer assignment failed";
		c := new(Vector) init() resize(2) putAt(1, 3) putAt(2, 6); // Integer vector
		d := new(Vector) init() resize(2) putAt(1, 5) putAt(2, 13); // Integer vector

		// Tests that integers were converted to reals
		tester assertTrue((c at(1) = 3.0) & (c at(2) = 6.0), errorMsg);
		tester assertTrue((d at(1) = 5.0) & (d at(2) = 13.0), errorMsg);

		// Test of real valued addition
		errorMsg := "Test of real valued addition failed";
		result := a + b;

		// result should have right value while a and b should be unaffected
		tester assertTrue((result at(1) = 3.0) & (result at(2) = 4.0), errorMsg);
		tester assertTrue((a at(1) = 1.0) & (a at(2) = 1.0), errorMsg);
		tester assertTrue((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);

 		a add_vector(b);

 		// The add function should change the state of a directly and b should be unaffected
		tester assertTrue((a at(1) = 3.0) & (a at(2) = 4.0), errorMsg);
		tester assertTrue((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);

		// Test of real valued subtraction
		errorMsg := "Test of real valued subtraction failed";
	    a := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 1.0); // Real valued vector
		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0); // Real valued vector

		result := b - a;

		// result should have right value while a and b should be unaffected
		tester assertTrue((result at(1) = 1.0) & (result at(2) = 2.0), errorMsg);
		tester assertTrue((a at(1) = 1.0) & (a at(2) = 1.0), errorMsg);
		tester assertTrue((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);

		// The subtract function should change the state of a directly and b should be unaffected
		a subtract_vector(b);
		tester assertTrue((a at(1) = -1.0) & (a at(2) = -2.0), errorMsg);
		tester assertTrue((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);


		// Test of multiplication with real
		errorMsg := "Test of multiplication with real failed";
		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0);
		r := 2.5;
		result := b * r;

		// result should have right value and b should be unaffected
		tester assertTrue((result at(1) = 5.0) & (result at(2) = 7.5), errorMsg);
		tester assertTrue((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);

		// Test of division with real
		r := 2.0;
		result := b / r;

		// result should have right value and b should be unaffected
		tester assertTrue((result at(1) = 1.0) & (result at(2) = 1.5), "Test of division with real failed");
		tester assertTrue((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);

		// Test of norm for real valued vectors, integer vectors not supported.
		errorMsg := "Test of norm failed";
		a := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 1.0);
		r := a norm();

		// r should have right value and a should be unaffected
		tester assertTrue(r = 2.0 sqrt(), errorMsg);
		tester assertTrue((a at(1) = 1.0) & (a at(2) = 1.0), errorMsg);

		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0);
		r := b norm();

		// r should have right value and b should be unaffected
		tester assertTrue(r = 13.0 sqrt(), errorMsg);
		tester assertTrue((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);

		c := new(Vector) init() resize(2) putAt(1, 0.0) putAt(2, 0.0); // zero vector
		r := c norm();

		tester assertTrue(r = 0.0, errorMsg);
		tester assertTrue((c at(1) = 0.0) & (c at(2) = 0.0), errorMsg);

		// Test of dot product
		errorMsg := "Test of dot product failed";
		a := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 1.0);
		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0);

		// Test that dot product is correct, symmetric and that a and b are unaffected
		tester assertTrue(a dot(b) = b dot(a), errorMsg);
		tester assertTrue((a at(1) = 1.0) & (a at(2) = 1.0), errorMsg);
		tester assertTrue((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);
		tester assertTrue(a dot(b) = 5.0, errorMsg);

		// Test of angle
		errorMsg := "Test of angle failed";
		e := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 0.0);
		f := new(Vector) init() resize(2) putAt(1, 0.0) putAt(2, 1.0);

		// Test the angle is symmetric, correct, and that e and f are unaffected
		tester assertTrue(e angle(f) = f angle(e), errorMsg);
		tester assertTrue(e angle(e) = 0.0, errorMsg); // Vector with itself
		tester assertTrue((e angle(f) > 1.5707) & (e angle(f) < 1.5708), errorMsg); // Orthogonal vectors
		tester assertTrue((e at(1) = 1.0) & (e at(2) = 0.0), errorMsg);
		tester assertTrue((f at(1) = 0.0) & (f at(2) = 1.0), errorMsg);

		// Test of cross product
		errorMsg := "Test of cross product failed";
		e := new(Vector) init() resize(3) putAt(1, 1.0) putAt(2, 0.0) putAt(3, 0.0);
		f := new(Vector) init() resize(3) putAt(1, 0.0) putAt(2, 1.0) putAt(3, 0.0);

		// Test that result is correct and that e and f are unaffected
		result := e cross(f);

		tester assertTrue((result at(1) = 0.0) & (result at(2) = 0.0) & (result at(3) = 1.0), errorMsg);

		result := f cross(e);

		tester assertTrue((result at(1) = 0.0) & (result at(2) = 0.0) & (result at(3) = -1.0), errorMsg);
		tester assertTrue((e at(1) = 1.0) & (e at(2) = 0.0) & (e at(3) = 0.0), errorMsg);
		tester assertTrue((f at(1) = 0.0) & (f at(2) = 1.0) & (f at(3) = 0.0), errorMsg);

		// Test of equality (relies implementation in Array)
		errorMsg := "Test of equals failed";
		a := new(Vector) init() resize(3) putAt(1, 1.0) putAt(2, 1.0) putAt(3, -1.0);
		b := new(Vector) init() resize(3) putAt(1, 2.0) putAt(2, 3.0) putAt(3, -1.0);

		tester assertTrue((a = a) & (b = b), errorMsg);
		tester assertTrue((a = b) not, errorMsg);

		tester report()
