//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2020.11.16 at 11:04:04 AM CET 
//

package org.eclipse.poosl.generatedxmlclasses;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for t_statements complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="t_statements">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice maxOccurs="unbounded">
 *         &lt;element name="sequence_of_statements" type="{uri:poosl}t_statements"/>
 *         &lt;element name="parallel_statements" type="{uri:poosl}t_statements"/>
 *         &lt;element name="select_statements" type="{uri:poosl}t_statements"/>
 *         &lt;element name="expression" type="{uri:poosl}t_expression"/>
 *         &lt;element name="process_method_call" type="{uri:poosl}t_process_method_call"/>
 *         &lt;element name="message_send" type="{uri:poosl}t_message_send"/>
 *         &lt;element name="message_receive" type="{uri:poosl}t_message_receive"/>
 *         &lt;element name="guard" type="{uri:poosl}t_guard"/>
 *         &lt;element name="if" type="{uri:poosl}t_if_statement"/>
 *         &lt;element name="while" type="{uri:poosl}t_while_statement"/>
 *         &lt;element name="abort" type="{uri:poosl}t_abort"/>
 *         &lt;element name="interrupt" type="{uri:poosl}t_interrupt"/>
 *         &lt;element name="skip" type="{uri:poosl}t_empty"/>
 *         &lt;element name="delay" type="{uri:poosl}t_expression"/>
 *         &lt;element name="switch" type="{uri:poosl}t_switch_statement"/>
 *       &lt;/choice>
 *       &lt;attribute name="stmt_handle" type="{http://www.w3.org/2001/XMLSchema}int" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "t_statements", propOrder = { "sequenceOfStatementsOrParallelStatementsOrSelectStatements" })
@XmlSeeAlso({ TStatement.class })
public class TStatements {

    @XmlElementRefs({ @XmlElementRef(name = "skip", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "message_receive", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "parallel_statements", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "expression", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "interrupt", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "select_statements", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "process_method_call", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "guard", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "abort", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "delay", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "message_send", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "if", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "while", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "switch", namespace = "uri:poosl", type = JAXBElement.class, required = false),
            @XmlElementRef(name = "sequence_of_statements", namespace = "uri:poosl", type = JAXBElement.class, required = false) })
    protected List<JAXBElement<?>> sequenceOfStatementsOrParallelStatementsOrSelectStatements;

    @XmlAttribute(name = "stmt_handle")
    protected Integer stmtHandle;

    /**
     * Gets the value of the sequenceOfStatementsOrParallelStatementsOrSelectStatements property.
     * 
     * <p>
     * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
     * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
     * the sequenceOfStatementsOrParallelStatementsOrSelectStatements property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * 
     * <pre>
     * getSequenceOfStatementsOrParallelStatementsOrSelectStatements().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list {@link JAXBElement }{@code <}{@link TEmpty }{@code >}
     * {@link JAXBElement }{@code <}{@link TMessageReceive }{@code >} {@link JAXBElement }{@code <}{@link TStatements
     * }{@code >} {@link JAXBElement }{@code <}{@link TExpression }{@code >} {@link JAXBElement
     * }{@code <}{@link TInterrupt }{@code >} {@link JAXBElement }{@code <}{@link TStatements }{@code >}
     * {@link JAXBElement }{@code <}{@link TProcessMethodCall }{@code >} {@link JAXBElement }{@code <}{@link TGuard
     * }{@code >} {@link JAXBElement }{@code <}{@link TAbort }{@code >} {@link JAXBElement }{@code <}{@link TExpression
     * }{@code >} {@link JAXBElement }{@code <}{@link TMessageSend }{@code >} {@link JAXBElement
     * }{@code <}{@link TIfStatement }{@code >} {@link JAXBElement }{@code <}{@link TWhileStatement }{@code >}
     * {@link JAXBElement }{@code <}{@link TSwitchStatement }{@code >} {@link JAXBElement }{@code <}{@link TStatements
     * }{@code >}
     * 
     * 
     */
    public List<JAXBElement<?>> getSequenceOfStatementsOrParallelStatementsOrSelectStatements() {
        if (sequenceOfStatementsOrParallelStatementsOrSelectStatements == null) {
            sequenceOfStatementsOrParallelStatementsOrSelectStatements = new ArrayList<JAXBElement<?>>();
        }
        return this.sequenceOfStatementsOrParallelStatementsOrSelectStatements;
    }

    /**
     * Gets the value of the stmtHandle property.
     * 
     * @return possible object is {@link Integer }
     * 
     */
    public Integer getStmtHandle() {
        return stmtHandle;
    }

    /**
     * Sets the value of the stmtHandle property.
     * 
     * @param value
     *            allowed object is {@link Integer }
     * 
     */
    public void setStmtHandle(Integer value) {
        this.stmtHandle = value;
    }

}
